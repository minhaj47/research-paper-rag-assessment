services:
  # Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: rag_qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped

  # Relational Database
  postgres:
    image: postgres:15-alpine
    container_name: rag_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-raguser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ragpass}
      POSTGRES_DB: ${POSTGRES_DB:-ragdb}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-raguser} -d ${POSTGRES_DB:-ragdb}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rag_api
    depends_on:
      qdrant:
        condition: service_started
      postgres:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-raguser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-ragpass}
      - POSTGRES_DB=${POSTGRES_DB:-ragdb}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-raguser}:${POSTGRES_PASSWORD:-ragpass}@postgres:5432/${POSTGRES_DB:-ragdb}
      - OLLAMA_HOST=http://host.docker.internal:11434
      - ENVIRONMENT=production
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./vector_store:/app/vector_store
    command: >
      sh -c "
        echo 'üöÄ Initializing database...' &&
        python src/init_db.py &&
        echo '‚úÖ Database initialized!' &&
        echo 'üåê Starting API server...' &&
        uvicorn src.main:app --host 0.0.0.0 --port 8000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    container_name: rag_frontend
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - NODE_ENV=production
    restart: unless-stopped

volumes:
  qdrant_data:
  postgres_data:
